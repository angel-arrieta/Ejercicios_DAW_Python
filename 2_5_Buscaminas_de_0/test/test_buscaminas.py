"""[
    ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
    ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
    ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
    ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
    ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
    ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
    ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
    ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"]
]

@pytest.mark.parametrize(
    "inMensaje, outMensaje",
    [
        ("Entrada1", "Salida1"),
        ("Entrada2", "Salida2")
    ]
)
def test_function(inMensaje, outMensaje):
    assert function(inMensaje) == outMensaje
"""
from src.buscaminas import jugar, dibujar_tablero, cubrir_tablero, control_coordenada
from src.buscaminas import comprobar_celda, marcar_celda, revelar_celda, cubrir_minas
from src.buscaminas import input_posicion_usable, crear_tablero, verificacion_victoria
import pytest


def test_crear_tablero():
    assert crear_tablero() == [
                              ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
                              ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
                              ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
                              ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
                              ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
                              ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
                              ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
                              ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"]
                              ]


@pytest.mark.parametrize(
    "inOpcion, outActuar",
    [
        ("1", "descubrir"),
        ("2", "marcar"),
        ("3", "salir"),
        ("a", "error"),
        ("0", "error")
    ]
)
def test_jugar(inOpcion, outActuar):
    assert jugar(inOpcion) == outActuar


@pytest.mark.parametrize(
    "inCoordenadas, outUsable",
    [
        ("0,1", [0, 1]),
        ("1,2", [1, 2]),
        ("3,3", [3, 3]),
        ("4,3", [4, 3]),
        ("5,7", [5, 7])

    ]
)
def test_input_posicion_usable(inCoordenadas, outUsable):
    assert input_posicion_usable(inCoordenadas) == outUsable


@pytest.mark.parametrize(
    "inCampo_descubierto, outCampo_cubierto",
    [
        (   [
            ["[0]", "[0]", "[1]", "[*]", "[2]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[1]", "[2]", "[2]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[*]", "[2]", "[2]", "[ ]", "[*]", "[ ]", "[*]"],
            ["[2]", "[2]", "[4]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[*]", "[3]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[3]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[2]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"]
            ],
            [
            ["[0]", "[0]", "[1]", "[ ]", "[2]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[1]", "[2]", "[2]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[ ]", "[2]", "[2]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[2]", "[2]", "[4]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[ ]", "[3]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[3]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[2]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"]
            ]
            ),
    ]
)
def test_cubrir_minas(inCampo_descubierto, outCampo_cubierto):
    assert cubrir_minas(inCampo_descubierto) == outCampo_cubierto


@pytest.mark.parametrize(
    "inCampo, inPosicion, outBooleano",
    [
        (   [
            ["[0]", "[0]", "[1]", "[*]", "[2]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[1]", "[2]", "[2]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[*]", "[2]", "[2]", "[ ]", "[*]", "[ ]", "[*]"],
            ["[2]", "[2]", "[4]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[*]", "[3]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[3]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[2]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"]
            ], [2, 1], True
        ),
        (   [
            ["[0]", "[0]", "[1]", "[*]", "[2]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[1]", "[2]", "[2]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[*]", "[2]", "[2]", "[ ]", "[*]", "[ ]", "[*]"],
            ["[2]", "[2]", "[4]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[*]", "[3]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[3]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[2]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"]
            ], [5, 3], False
        )
    ]
)
def test_comprobar_celda(inCampo, inPosicion, outBooleano):
    assert comprobar_celda(inCampo, inPosicion) == outBooleano


@pytest.mark.parametrize(
    "inTabla, inPosicion, inIteracion, outTabla",
    [
        (   [
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]"],
            ["[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[*]", "[*]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[*]", "[*]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"],
            ["[ ]", "[ ]", "[*]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"]
            ], [1, 2], 0,
            [
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]"],
            ["[ ]", "[*]", "[2]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[*]", "[*]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[*]", "[*]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"],
            ["[ ]", "[ ]", "[*]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"]
            ] ),
        (   [
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]"],
            ["[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[*]", "[*]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[*]", "[*]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"],
            ["[ ]", "[ ]", "[*]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"]
            ], [3, 0], 0,
            [
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]"],
            ["[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[*]", "[ ]", "[ ]", "[*]", "[*]", "[ ]"],
            ["[0]", "[1]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[*]", "[*]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"],
            ["[ ]", "[ ]", "[*]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"]
            ] )
    ]
)
def test_revelar_celda(inTabla, inPosicion, inIteracion, outTabla):
    assert revelar_celda(inTabla, inPosicion, inIteracion) == outTabla


@pytest.mark.parametrize(
    "inTabla, inPosicion, inCambio, outTabla",
    [
        (   [
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"]
            ], [1, 2], "B",
            [
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[B]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"]
            ] ),
        (   [
            ["[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ *"],
            ["[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[*]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"]
            ], [3, 3], "X",
            [
            ["[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ *"],
            ["[ ]", "[ ]", "[ ]", "[X]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[*]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"],
            ["[ ]", "[ ]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"]
            ] )
    ]
)
def test_marcar_celda(inTabla, inPosicion, inCambio, outTabla):
    assert marcar_celda(inTabla, inPosicion, inCambio) == outTabla


@pytest.mark.parametrize(
    "inTabla, outEstado",
    [
        (   [
            ["[0]", "[0]", "[1]", "[*]", "[2]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[1]", "[2]", "[2]", "[*]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[*]", "[2]", "[2]", "[ ]", "[*]", "[ ]", "[*]"],
            ["[2]", "[2]", "[4]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[*]", "[3]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[3]", "[ ]", "[ ]", "[*]", "[ ]", "[ ]"],
            ["[1]", "[2]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]", "[ ]"],
            ["[*]", "[2]", "[ ]", "[ ]", "[ ]", "[ ]", "[*]", "[ ]"]
            ], "nada"),
        ([
             ["[0]", "[0]", "[1]", "[*]", "[2]", "[1]", "[0]", "[0]"],
             ["[1]", "[1]", "[2]", "[2]", "[*]", "[2]", "[2]", "[1]"],
             ["[1]", "[*]", "[2]", "[2]", "[2]", "[*]", "[2]", "[*]"],
             ["[2]", "[2]", "[4]", "[*]", "[3]", "[ ]", "[ ]", "[ ]"],
             ["[1]", "[*]", "[3]", "[*]", "[ ]", "[ ]", "[ ]", "[ ]"],
             ["[1]", "[2]", "[3]", "[2]", "[ ]", "[*]", "[ ]", "[ ]"],
             ["[1]", "[2]", "[*]", "[1]", "[ ]", "[ ]", "[ ]", "[ ]"],
             ["[*]", "[2]", "[1]", "[1]", "[ ]", "[ ]", "[*]", "[ ]"]
             ], "nada"),
        (   [
            ["[0]", "[0]", "[1]", "[*]", "[2]", "[1]", "[0]", "[0]"],
            ["[1]", "[1]", "[2]", "[2]", "[*]", "[2]", "[2]", "[1]"],
            ["[1]", "[*]", "[2]", "[2]", "[3]", "[*]", "[2]", "[*]"],
            ["[2]", "[2]", "[4]", "[*]", "[3]", "[1]", "[2]", "[1]"],
            ["[1]", "[*]", "[3]", "[*]", "[3]", "[1]", "[1]", "[0]"],
            ["[1]", "[2]", "[3]", "[2]", "[2]", "[*]", "[1]", "[0]"],
            ["[1]", "[2]", "[*]", "[1]", "[1]", "[2]", "[2]", "[1]"],
            ["[*]", "[2]", "[1]", "[1]", "[0]", "[1]", "[*]", "[1]"]
            ], "gana")
    ]
)
def test_verificacion_victoria(inTabla, outEstado):
    assert verificacion_victoria(inTabla) == outEstado