
import pytest
from src.minas import contar_minas_adyacentes, imprimir_tablero, imprimir_tablero_oculto, revelar_celda
from src.minas import revelar_celdas_vacias, contar_celdas_reveladas, revelar_alrededor, marcar_celda
from src.minas import verificar_victoria


@pytest.mark.parametrize(
    "inTablero, inFila, inColumna, outCantidad_minas",
    [
        ([
         [' ', ' ', ' ', '*', ' ', ' ', ' ', ' '],
         [' ', '*', ' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'],
         [' ', '*', ' ', ' ', ' ', '*', ' ', ' '],
         [' ', '*', ' ', ' ', '*', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', '*', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', '*', ' ', ' '],
         [' ', ' ', ' ', ' ', '*', ' ', ' ', ' '] ],
         1, 2, 2),
        ([
         [' ', ' ', ' ', '*', ' ', ' ', ' ', ' '],
         [' ', '*', ' ', ' ', ' ', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'],
         [' ', '*', ' ', ' ', ' ', '*', ' ', ' '],
         [' ', '*', ' ', ' ', '*', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', '*', ' ', ' ', ' '],
         [' ', ' ', ' ', ' ', ' ', '*', ' ', ' '],
         [' ', ' ', ' ', ' ', '*', ' ', ' ', ' '] ],
         4, 5, 3)

    ]
)
def test_contar_minas_adyacentes(inTablero, inFila, inColumna, outCantidad_minas):
    assert contar_minas_adyacentes(inTablero, inFila, inColumna) == outCantidad_minas


@pytest.mark.parametrize(
    "inTablero, outDibujo",
    [
       ([
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "]
        ],
        ("   1 2 3 4 5 6 7 8\n"
         " 1                \n"
         " 2                \n"
         " 3                \n"
         " 4                \n"
         " 5                \n"
         " 6                \n"
         " 7                \n"
         " 8                \n")),
       ([
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", "F", " ", " ", " ", " ", " ", " "],
        ["1", "1", "2", " ", " ", " ", " ", " "],
        ["0", "0", "1", "F", " ", " ", " ", " "],
        ["0", "0", "1", " ", " ", "F", " ", " "],
        ["1", "1", "0", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "]
        ],
        ("   1 2 3 4 5 6 7 8\n"
         " 1                \n"
         " 2   F            \n"
         " 3 1 1 2          \n"
         " 4 0 0 1 F        \n"
         " 5 0 0 1     F    \n"
         " 6 1 1 0          \n"
         " 7                \n"
         " 8                \n"))
    ]
)
def test_imprimir_tablero(inTablero, outDibujo):
    assert imprimir_tablero(inTablero) == outDibujo


@pytest.mark.parametrize(
    "inTablero, inBanderas, outDibujo",
    [
       ([
        ["·", "·", "*", "·", "·", "·", "·", "·"],
        ["·", "*", "·", "·", "*", "·", "*", "·"],
        ["·", "·", "·", "·", "·", "·", "·", "·"],
        ["·", "·", "·", "*", "·", "·", "·", "·"],
        ["·", "·", "·", "·", "·", "*", "·", "·"],
        ["·", "·", "·", "·", "*", "·", "·", "·"],
        ["*", "·", "·", "·", "·", "·", "*", "·"],
        ["·", "*", "·", "*", "·", "·", "*", "·"]
        ], (),
        ("   1 2 3 4 5 6 7 8\n"
         " 1 · · · · · · · ·\n"
         " 2 · · · · · · · ·\n"
         " 3 · · · · · · · ·\n"
         " 4 · · · · · · · ·\n"
         " 5 · · · · · · · ·\n"
         " 6 · · · · · · · ·\n"
         " 7 · · · · · · · ·\n"
         " 8 · · · · · · · ·\n")),
       ([
        ["·", "·", "*", "·", "·", "·", "·", "·"],
        ["·", "*", "·", "·", "*", "·", "*", "·"],
        ["1", "1", "2", "·", "·", "·", "·", "·"],
        ["0", "0", "1", "*", "·", "·", "·", "·"],
        ["0", "0", "1", "·", "·", "*", "·", "·"],
        ["1", "1", "0", "·", "*", "·", "·", "·"],
        ["*", "·", "·", "·", "·", "·", "*", "·"],
        ["·", "*", "·", "*", "·", "·", "*", "·"]
        ], ((1, 1), (3, 3), (4, 5)),
        ("   1 2 3 4 5 6 7 8\n"
         " 1 · · · · · · · ·\n"
         " 2 · F · · · · · ·\n"
         " 3 1 1 2 · · · · ·\n"
         " 4 0 0 1 F · · · ·\n"
         " 5 0 0 1 · · F · ·\n"
         " 6 1 1 0 · · · · ·\n"
         " 7 · · · · · · · ·\n"
         " 8 · · · · · · · ·\n"))
    ]
)
def test_imprimir_tablero_oculto(inTablero, inBanderas, outDibujo):
    assert imprimir_tablero_oculto(inTablero, inBanderas) == outDibujo


@pytest.mark.parametrize(
    "inTablero, inRevelado, inFila, inColumna, outTupla",
    [
       ([
        ["·", "·", "*", "·", "·", "·", "·", "·"],
        ["·", "*", "·", "·", "*", "·", "*", "·"],
        ["·", "·", "·", "·", "·", "·", "·", "·"],
        ["·", "·", "·", "*", "·", "·", "·", "·"],
        ["·", "·", "·", "·", "·", "*", "·", "·"],
        ["·", "·", "·", "·", "*", "·", "·", "·"],
        ["*", "·", "·", "·", "·", "·", "*", "·"],
        ["·", "*", "·", "*", "·", "·", "*", "·"]
        ], set(),
        3, 1,
        (   {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3),
             (5, 0), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3)},
            [
            ["·", "·", "*", "·", "·", "·", "·", "·"],
            ["·", "*", "·", "·", "*", "·", "*", "·"],
            ["1", "1", "2", "·", "·", "·", "·", "·"],
            ["0", "0", "1", "*", "·", "·", "·", "·"],
            ["0", "0", "1", "2", "·", "*", "·", "·"],
            ["1", "1", "0", "1", "*", "·", "·", "·"],
            ["*", "2", "2", "2", "·", "·", "*", "·"],
            ["·", "*", "·", "*", "·", "·", "*", "·"]
            ], True )
       ), (
        [
        ["·", "·", "*", "·", "·", "·", "·", "·"],
        ["·", "*", "·", "·", "*", "·", "*", "·"],
        ["1", "1", "2", "·", "·", "·", "·", "·"],
        ["0", "0", "1", "*", "·", "·", "·", "·"],
        ["0", "0", "1", "2", "·", "*", "·", "·"],
        ["1", "1", "0", "1", "*", "·", "·", "·"],
        ["*", "2", "2", "2", "·", "·", "*", "·"],
        ["·", "*", "·", "*", "·", "·", "*", "·"]
        ], {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3),
             (5, 0), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3)},
        4, 4,
        (   {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3),
             (5, 0), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3), (4, 4)},
            [
            ["·", "·", "*", "·", "·", "·", "·", "·"],
            ["·", "*", "·", "·", "*", "·", "*", "·"],
            ["1", "1", "2", "·", "·", "·", "·", "·"],
            ["0", "0", "1", "*", "·", "·", "·", "·"],
            ["0", "0", "1", "2", "3", "*", "·", "·"],
            ["1", "1", "0", "1", "*", "·", "·", "·"],
            ["*", "2", "2", "2", "·", "·", "*", "·"],
            ["·", "*", "·", "*", "·", "·", "*", "·"]
            ], True )
       ), (
        [
        ["·", "·", "*", "·", "·", "·", "·", "·"],
        ["·", "*", "·", "·", "*", "·", "*", "·"],
        ["1", "1", "2", "·", "·", "·", "·", "·"],
        ["0", "0", "1", "*", "·", "·", "·", "·"],
        ["0", "0", "1", "2", "3", "*", "·", "·"],
        ["1", "1", "0", "1", "*", "·", "·", "·"],
        ["*", "2", "2", "2", "·", "·", "*", "·"],
        ["·", "*", "·", "*", "·", "·", "*", "·"]
        ], {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3),
             (5, 0), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3), (4, 4)},
        1, 1,
        (   {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3),
             (5, 0), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3), (4, 4)},
            [
            ["·", "·", "*", "·", "·", "·", "·", "·"],
            ["·", "*", "·", "·", "*", "·", "*", "·"],
            ["1", "1", "2", "·", "·", "·", "·", "·"],
            ["0", "0", "1", "*", "·", "·", "·", "·"],
            ["0", "0", "1", "2", "3", "*", "·", "·"],
            ["1", "1", "0", "1", "*", "·", "·", "·"],
            ["*", "2", "2", "2", "·", "·", "*", "·"],
            ["·", "*", "·", "*", "·", "·", "*", "·"]
            ], False )
       )
    ]
)
def test_revelar_celda(inTablero, inRevelado, inFila, inColumna, outTupla):
    assert revelar_celda(inTablero, inRevelado, inFila, inColumna) == outTupla


@pytest.mark.parametrize(
    "inTablero, inRevelado, inFila, inColumna, outTupla",
    [
        ([
         ["·", "·", "*", "·", "·", "·", "·", "·"],
         ["·", "*", "·", "·", "*", "·", "*", "·"],
         ["·", "·", "·", "·", "·", "·", "·", "·"],
         ["·", "·", "·", "*", "·", "·", "·", "·"],
         ["·", "·", "·", "·", "·", "*", "·", "·"],
         ["·", "·", "·", "·", "*", "·", "·", "·"],
         ["*", "·", "·", "·", "·", "·", "*", "·"],
         ["·", "*", "·", "*", "·", "·", "*", "·"]
         ], set(),
        3, 1,
        (   {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3),
             (5, 0), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3)},
            [
            ["·", "·", "*", "·", "·", "·", "·", "·"],
            ["·", "*", "·", "·", "*", "·", "*", "·"],
            ["1", "1", "2", "·", "·", "·", "·", "·"],
            ["0", "0", "1", "*", "·", "·", "·", "·"],
            ["0", "0", "1", "2", "·", "*", "·", "·"],
            ["1", "1", "0", "1", "*", "·", "·", "·"],
            ["*", "2", "2", "2", "·", "·", "*", "·"],
            ["·", "*", "·", "*", "·", "·", "*", "·"]
            ] )
       ), ([
            ["·", "·", "*", "·", "·", "·", "·", "·"],
            ["·", "*", "·", "·", "*", "·", "*", "·"],
            ["1", "1", "2", "·", "·", "·", "·", "·"],
            ["0", "0", "1", "*", "·", "·", "·", "·"],
            ["0", "0", "1", "2", "·", "*", "·", "·"],
            ["1", "1", "0", "1", "*", "·", "·", "·"],
            ["*", "2", "2", "2", "·", "·", "*", "·"],
            ["·", "*", "·", "*", "·", "·", "*", "·"]
            ], {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3),
             (5, 0), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3)},
        1, 0,
        (   {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3),
             (5, 0), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3), (1, 0)},
            [
            ["·", "·", "*", "·", "·", "·", "·", "·"],
            ["1", "*", "·", "·", "*", "·", "*", "·"],
            ["1", "1", "2", "·", "·", "·", "·", "·"],
            ["0", "0", "1", "*", "·", "·", "·", "·"],
            ["0", "0", "1", "2", "·", "*", "·", "·"],
            ["1", "1", "0", "1", "*", "·", "·", "·"],
            ["*", "2", "2", "2", "·", "·", "*", "·"],
            ["·", "*", "·", "*", "·", "·", "*", "·"]
            ] )
       ),
    ]
)
def test_revelar_celdas_vacias(inTablero, inRevelado, inFila, inColumna, outTupla):
    assert revelar_celdas_vacias(inTablero, inRevelado, inFila, inColumna) == outTupla


@pytest.mark.parametrize(
    "inTablero, inReveladas, outReveladas_despues",
    [
        ( [
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        ["1", "1", "2", " ", " ", " ", " ", " "],
        ["0", "0", "1", "*", " ", " ", " ", " "],
        ["0", "0", "1", " ", " ", "*", " ", " "],
        [" ", " ", " ", " ", "*", " ", " ", " "],
        ["*", " ", " ", " ", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ], set(), {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2)} ),
        ( [
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        ["1", "1", "2", " ", " ", " ", " ", " "],
        ["0", "0", "1", "*", " ", " ", " ", " "],
        ["0", "0", "1", "2", " ", "*", " ", " "],
        [" ", "1", "0", "1", "*", " ", " ", " "],
        ["*", "2", "2", "2", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ], {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2)},

          {(3, 1), (2, 0), (2, 1), (2, 2), (3, 0), (3, 2), (4, 0), (4, 1), (4, 2),
           (4, 3), (5, 2), (5, 1), (5, 3), (6, 1), (6, 2), (6, 3)} ),
    ]
)
def test_contar_celdas_reveladas(inTablero, inReveladas, outReveladas_despues):
    assert contar_celdas_reveladas(inTablero, inReveladas) == outReveladas_despues


@pytest.mark.parametrize(
    "inTablero, inFila, inColumna, inRecursividad, outTablero_despues",
    [
        ( [
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        [" ", " ", " ", " ", " ", " ", " ", " "],
        [" ", "0", " ", "*", " ", " ", " ", " "],
        [" ", " ", " ", " ", " ", "*", " ", " "],
        [" ", " ", " ", " ", "*", " ", " ", " "],
        ["*", " ", " ", " ", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ], 3, 1, 0,
        [
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        ["1", "1", "2", " ", " ", " ", " ", " "],
        ["0", "0", "1", "*", " ", " ", " ", " "],
        ["0", "0", "1", "2", " ", "*", " ", " "],
        ["1", "1", "0", "1", "*", " ", " ", " "],
        ["*", "2", "2", "2", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ] ), ( [
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        ["1", "1", "2", " ", " ", " ", " ", " "],
        ["0", "0", "1", "*", " ", " ", " ", " "],
        ["0", "0", "1", " ", " ", "*", " ", " "],
        [" ", " ", " ", " ", "*", " ", " ", " "],
        ["*", " ", " ", " ", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ], 4, 1, 1,
        [
        [" ", " ", "*", " ", " ", " ", " ", " "],
        [" ", "*", " ", " ", "*", " ", "*", " "],
        ["1", "1", "2", " ", " ", " ", " ", " "],
        ["0", "0", "1", "*", " ", " ", " ", " "],
        ["0", "0", "1", "2", " ", "*", " ", " "],
        ["1", "1", "0", "1", "*", " ", " ", " "],
        ["*", "2", "2", "2", " ", " ", "*", " "],
        [" ", "*", " ", "*", " ", " ", "*", " "]
        ] ),
    ]
)
def test_revelar_alrededor(inTablero, inFila, inColumna, inRecursividad, outTablero_despues):
    assert revelar_alrededor(inTablero, inFila, inColumna, inRecursividad) == outTablero_despues


@pytest.mark.parametrize(
    "inMarcado, inFila, inColumna, outMarcado_actual",
    [
        (set(), 3, 1, {(3, 1)}),
        ({(3, 1)}, 4, 1, {(3, 1), (4, 1)}),
        ({(3, 1), (4, 1)}, 5, 2, {(3, 1), (4, 1), (5, 2)}),
        ({(3, 1), (4, 1), (5, 2)}, 3, 1, {(4, 1), (5, 2)}),

    ]
)
def test_marcar_celda(inMarcado, inFila, inColumna, outMarcado_actual):
    assert marcar_celda(inMarcado, inFila, inColumna) == outMarcado_actual


@pytest.mark.parametrize(
    "inAncho, inCantReveladas, outBooleano",
    [
        (8, 10, False),
        (8, 22, False),
        (8, 36, False),
        (8, 47, False),
        (8, 54, True)
    ]
)
def test_verificar_victoria(inAncho, inCantReveladas, outBooleano):
    assert verificar_victoria(inAncho, inCantReveladas) == outBooleano
